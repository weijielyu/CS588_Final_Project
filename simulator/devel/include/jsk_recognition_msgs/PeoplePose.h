// Generated by gencpp from file jsk_recognition_msgs/PeoplePose.msg
// DO NOT EDIT!


#ifndef JSK_RECOGNITION_MSGS_MESSAGE_PEOPLEPOSE_H
#define JSK_RECOGNITION_MSGS_MESSAGE_PEOPLEPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace jsk_recognition_msgs
{
template <class ContainerAllocator>
struct PeoplePose_
{
  typedef PeoplePose_<ContainerAllocator> Type;

  PeoplePose_()
    : limb_names()
    , poses()
    , scores()  {
    }
  PeoplePose_(const ContainerAllocator& _alloc)
    : limb_names(_alloc)
    , poses(_alloc)
    , scores(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _limb_names_type;
  _limb_names_type limb_names;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _poses_type;
  _poses_type poses;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _scores_type;
  _scores_type scores;





  typedef boost::shared_ptr< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> const> ConstPtr;

}; // struct PeoplePose_

typedef ::jsk_recognition_msgs::PeoplePose_<std::allocator<void> > PeoplePose;

typedef boost::shared_ptr< ::jsk_recognition_msgs::PeoplePose > PeoplePosePtr;
typedef boost::shared_ptr< ::jsk_recognition_msgs::PeoplePose const> PeoplePoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator1> & lhs, const ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator2> & rhs)
{
  return lhs.limb_names == rhs.limb_names &&
    lhs.poses == rhs.poses &&
    lhs.scores == rhs.scores;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator1> & lhs, const ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_recognition_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24f6e59dae1b7cbd9d480f0008a5a515";
  }

  static const char* value(const ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24f6e59dae1b7cbdULL;
  static const uint64_t static_value2 = 0x9d480f0008a5a515ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_recognition_msgs/PeoplePose";
  }

  static const char* value(const ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] limb_names\n"
"geometry_msgs/Pose[] poses\n"
"float32[] scores\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.limb_names);
      stream.next(m.poses);
      stream.next(m.scores);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PeoplePose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_recognition_msgs::PeoplePose_<ContainerAllocator>& v)
  {
    s << indent << "limb_names[]" << std::endl;
    for (size_t i = 0; i < v.limb_names.size(); ++i)
    {
      s << indent << "  limb_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.limb_names[i]);
    }
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
    s << indent << "scores[]" << std::endl;
    for (size_t i = 0; i < v.scores.size(); ++i)
    {
      s << indent << "  scores[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.scores[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_RECOGNITION_MSGS_MESSAGE_PEOPLEPOSE_H
