// Generated by gencpp from file jsk_recognition_msgs/PlotData.msg
// DO NOT EDIT!


#ifndef JSK_RECOGNITION_MSGS_MESSAGE_PLOTDATA_H
#define JSK_RECOGNITION_MSGS_MESSAGE_PLOTDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace jsk_recognition_msgs
{
template <class ContainerAllocator>
struct PlotData_
{
  typedef PlotData_<ContainerAllocator> Type;

  PlotData_()
    : header()
    , xs()
    , ys()
    , type(0)
    , label()
    , fit_line(false)
    , fit_line_ransac(false)  {
    }
  PlotData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , xs(_alloc)
    , ys(_alloc)
    , type(0)
    , label(_alloc)
    , fit_line(false)
    , fit_line_ransac(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _xs_type;
  _xs_type xs;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ys_type;
  _ys_type ys;

   typedef uint32_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef uint8_t _fit_line_type;
  _fit_line_type fit_line;

   typedef uint8_t _fit_line_ransac_type;
  _fit_line_ransac_type fit_line_ransac;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SCATTER)
  #undef SCATTER
#endif
#if defined(_WIN32) && defined(LINE)
  #undef LINE
#endif

  enum {
    SCATTER = 1u,
    LINE = 2u,
  };


  typedef boost::shared_ptr< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> const> ConstPtr;

}; // struct PlotData_

typedef ::jsk_recognition_msgs::PlotData_<std::allocator<void> > PlotData;

typedef boost::shared_ptr< ::jsk_recognition_msgs::PlotData > PlotDataPtr;
typedef boost::shared_ptr< ::jsk_recognition_msgs::PlotData const> PlotDataConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_recognition_msgs::PlotData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_recognition_msgs::PlotData_<ContainerAllocator1> & lhs, const ::jsk_recognition_msgs::PlotData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.xs == rhs.xs &&
    lhs.ys == rhs.ys &&
    lhs.type == rhs.type &&
    lhs.label == rhs.label &&
    lhs.fit_line == rhs.fit_line &&
    lhs.fit_line_ransac == rhs.fit_line_ransac;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_recognition_msgs::PlotData_<ContainerAllocator1> & lhs, const ::jsk_recognition_msgs::PlotData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_recognition_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abc388ba2207b305f8695ad025452af4";
  }

  static const char* value(const ::jsk_recognition_msgs::PlotData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xabc388ba2207b305ULL;
  static const uint64_t static_value2 = 0xf8695ad025452af4ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_recognition_msgs/PlotData";
  }

  static const char* value(const ::jsk_recognition_msgs::PlotData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 SCATTER=1\n"
"uint32 LINE=2\n"
"\n"
"Header header\n"
"float32[] xs\n"
"float32[] ys\n"
"uint32 type                     #SCATTER or LINE\n"
"string label\n"
"bool fit_line\n"
"bool fit_line_ransac\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::jsk_recognition_msgs::PlotData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.xs);
      stream.next(m.ys);
      stream.next(m.type);
      stream.next(m.label);
      stream.next(m.fit_line);
      stream.next(m.fit_line_ransac);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlotData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_recognition_msgs::PlotData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_recognition_msgs::PlotData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "xs[]" << std::endl;
    for (size_t i = 0; i < v.xs.size(); ++i)
    {
      s << indent << "  xs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.xs[i]);
    }
    s << indent << "ys[]" << std::endl;
    for (size_t i = 0; i < v.ys.size(); ++i)
    {
      s << indent << "  ys[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ys[i]);
    }
    s << indent << "type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.type);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "fit_line: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fit_line);
    s << indent << "fit_line_ransac: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fit_line_ransac);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_RECOGNITION_MSGS_MESSAGE_PLOTDATA_H
