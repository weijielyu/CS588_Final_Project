# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jsk_recognition_msgs/NonMaximumSuppressionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import jsk_recognition_msgs.msg

class NonMaximumSuppressionRequest(genpy.Message):
  _md5sum = "54b7e6632715e9e6592b503a3c881dfc"
  _type = "jsk_recognition_msgs/NonMaximumSuppressionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """jsk_recognition_msgs/Rect[] rect
float32 threshold

================================================================================
MSG: jsk_recognition_msgs/Rect
int32 x
int32 y
int32 width
int32 height
"""
  __slots__ = ['rect','threshold']
  _slot_types = ['jsk_recognition_msgs/Rect[]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rect,threshold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NonMaximumSuppressionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rect is None:
        self.rect = []
      if self.threshold is None:
        self.threshold = 0.
    else:
      self.rect = []
      self.threshold = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.rect)
      buff.write(_struct_I.pack(length))
      for val1 in self.rect:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.x, _x.y, _x.width, _x.height))
      _x = self.threshold
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rect is None:
        self.rect = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rect = []
      for i in range(0, length):
        val1 = jsk_recognition_msgs.msg.Rect()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4i().unpack(str[start:end])
        self.rect.append(val1)
      start = end
      end += 4
      (self.threshold,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.rect)
      buff.write(_struct_I.pack(length))
      for val1 in self.rect:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.x, _x.y, _x.width, _x.height))
      _x = self.threshold
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rect is None:
        self.rect = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rect = []
      for i in range(0, length):
        val1 = jsk_recognition_msgs.msg.Rect()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4i().unpack(str[start:end])
        self.rect.append(val1)
      start = end
      end += 4
      (self.threshold,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jsk_recognition_msgs/NonMaximumSuppressionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import jsk_recognition_msgs.msg

class NonMaximumSuppressionResponse(genpy.Message):
  _md5sum = "8db21435e67f6d13fc94ccbd355f30f1"
  _type = "jsk_recognition_msgs/NonMaximumSuppressionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """jsk_recognition_msgs/Rect[] bbox
int64 bbox_count


================================================================================
MSG: jsk_recognition_msgs/Rect
int32 x
int32 y
int32 width
int32 height
"""
  __slots__ = ['bbox','bbox_count']
  _slot_types = ['jsk_recognition_msgs/Rect[]','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bbox,bbox_count

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NonMaximumSuppressionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bbox is None:
        self.bbox = []
      if self.bbox_count is None:
        self.bbox_count = 0
    else:
      self.bbox = []
      self.bbox_count = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.bbox)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.x, _x.y, _x.width, _x.height))
      _x = self.bbox_count
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bbox is None:
        self.bbox = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox = []
      for i in range(0, length):
        val1 = jsk_recognition_msgs.msg.Rect()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4i().unpack(str[start:end])
        self.bbox.append(val1)
      start = end
      end += 8
      (self.bbox_count,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.bbox)
      buff.write(_struct_I.pack(length))
      for val1 in self.bbox:
        _x = val1
        buff.write(_get_struct_4i().pack(_x.x, _x.y, _x.width, _x.height))
      _x = self.bbox_count
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bbox is None:
        self.bbox = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bbox = []
      for i in range(0, length):
        val1 = jsk_recognition_msgs.msg.Rect()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4i().unpack(str[start:end])
        self.bbox.append(val1)
      start = end
      end += 8
      (self.bbox_count,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
class NonMaximumSuppression(object):
  _type          = 'jsk_recognition_msgs/NonMaximumSuppression'
  _md5sum = 'b5f1e6a38f5b631194f786d010dab9fa'
  _request_class  = NonMaximumSuppressionRequest
  _response_class = NonMaximumSuppressionResponse
