# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jsk_recognition_msgs/TowerRobotMoveCommandRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TowerRobotMoveCommandRequest(genpy.Message):
  _md5sum = "aadba056bdce0494569ab50ecd2ec90c"
  _type = "jsk_recognition_msgs/TowerRobotMoveCommandRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# a service to move robot with tower index
byte ROBOT1=1
byte ROBOT2=2
byte ROBOT3=3

byte PLATE_SMALL=1
byte PLATE_MIDDLE=2
byte PLATE_LARGE=3

byte TOWER_LOWEST=1
byte TOWER_MIDDLE=2
byte TOWER_HIGHEST=3
byte TOWER_LOWEST2=1

byte OPTION_NONE=0
byte OPTION_MOVE_INITIAL=1

int32 robot_index
int32 plate_index
int32 from_tower
int32 to_tower
int32 option_command
"""
  # Pseudo-constants
  ROBOT1 = 1
  ROBOT2 = 2
  ROBOT3 = 3
  PLATE_SMALL = 1
  PLATE_MIDDLE = 2
  PLATE_LARGE = 3
  TOWER_LOWEST = 1
  TOWER_MIDDLE = 2
  TOWER_HIGHEST = 3
  TOWER_LOWEST2 = 1
  OPTION_NONE = 0
  OPTION_MOVE_INITIAL = 1

  __slots__ = ['robot_index','plate_index','from_tower','to_tower','option_command']
  _slot_types = ['int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_index,plate_index,from_tower,to_tower,option_command

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TowerRobotMoveCommandRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_index is None:
        self.robot_index = 0
      if self.plate_index is None:
        self.plate_index = 0
      if self.from_tower is None:
        self.from_tower = 0
      if self.to_tower is None:
        self.to_tower = 0
      if self.option_command is None:
        self.option_command = 0
    else:
      self.robot_index = 0
      self.plate_index = 0
      self.from_tower = 0
      self.to_tower = 0
      self.option_command = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5i().pack(_x.robot_index, _x.plate_index, _x.from_tower, _x.to_tower, _x.option_command))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.robot_index, _x.plate_index, _x.from_tower, _x.to_tower, _x.option_command,) = _get_struct_5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5i().pack(_x.robot_index, _x.plate_index, _x.from_tower, _x.to_tower, _x.option_command))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.robot_index, _x.plate_index, _x.from_tower, _x.to_tower, _x.option_command,) = _get_struct_5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5i = None
def _get_struct_5i():
    global _struct_5i
    if _struct_5i is None:
        _struct_5i = struct.Struct("<5i")
    return _struct_5i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jsk_recognition_msgs/TowerRobotMoveCommandResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TowerRobotMoveCommandResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "jsk_recognition_msgs/TowerRobotMoveCommandResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TowerRobotMoveCommandResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class TowerRobotMoveCommand(object):
  _type          = 'jsk_recognition_msgs/TowerRobotMoveCommand'
  _md5sum = 'aadba056bdce0494569ab50ecd2ec90c'
  _request_class  = TowerRobotMoveCommandRequest
  _response_class = TowerRobotMoveCommandResponse
