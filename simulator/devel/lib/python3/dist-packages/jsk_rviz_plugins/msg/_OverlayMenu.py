# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jsk_rviz_plugins/OverlayMenu.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class OverlayMenu(genpy.Message):
  _md5sum = "517426ba068ca022d86cf2c56c98889f"
  _type = "jsk_rviz_plugins/OverlayMenu"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 ACTION_SELECT=0
int32 ACTION_CLOSE=1
int32 action
uint32 current_index
string[] menus
string title
std_msgs/ColorRGBA bg_color
std_msgs/ColorRGBA fg_color

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  # Pseudo-constants
  ACTION_SELECT = 0
  ACTION_CLOSE = 1

  __slots__ = ['action','current_index','menus','title','bg_color','fg_color']
  _slot_types = ['int32','uint32','string[]','string','std_msgs/ColorRGBA','std_msgs/ColorRGBA']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action,current_index,menus,title,bg_color,fg_color

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OverlayMenu, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action is None:
        self.action = 0
      if self.current_index is None:
        self.current_index = 0
      if self.menus is None:
        self.menus = []
      if self.title is None:
        self.title = ''
      if self.bg_color is None:
        self.bg_color = std_msgs.msg.ColorRGBA()
      if self.fg_color is None:
        self.fg_color = std_msgs.msg.ColorRGBA()
    else:
      self.action = 0
      self.current_index = 0
      self.menus = []
      self.title = ''
      self.bg_color = std_msgs.msg.ColorRGBA()
      self.fg_color = std_msgs.msg.ColorRGBA()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iI().pack(_x.action, _x.current_index))
      length = len(self.menus)
      buff.write(_struct_I.pack(length))
      for val1 in self.menus:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.title
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8f().pack(_x.bg_color.r, _x.bg_color.g, _x.bg_color.b, _x.bg_color.a, _x.fg_color.r, _x.fg_color.g, _x.fg_color.b, _x.fg_color.a))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bg_color is None:
        self.bg_color = std_msgs.msg.ColorRGBA()
      if self.fg_color is None:
        self.fg_color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.action, _x.current_index,) = _get_struct_iI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.menus = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.menus.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.title = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.title = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.bg_color.r, _x.bg_color.g, _x.bg_color.b, _x.bg_color.a, _x.fg_color.r, _x.fg_color.g, _x.fg_color.b, _x.fg_color.a,) = _get_struct_8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iI().pack(_x.action, _x.current_index))
      length = len(self.menus)
      buff.write(_struct_I.pack(length))
      for val1 in self.menus:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.title
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8f().pack(_x.bg_color.r, _x.bg_color.g, _x.bg_color.b, _x.bg_color.a, _x.fg_color.r, _x.fg_color.g, _x.fg_color.b, _x.fg_color.a))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bg_color is None:
        self.bg_color = std_msgs.msg.ColorRGBA()
      if self.fg_color is None:
        self.fg_color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.action, _x.current_index,) = _get_struct_iI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.menus = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.menus.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.title = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.title = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.bg_color.r, _x.bg_color.g, _x.bg_color.b, _x.bg_color.a, _x.fg_color.r, _x.fg_color.g, _x.fg_color.b, _x.fg_color.a,) = _get_struct_8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_iI = None
def _get_struct_iI():
    global _struct_iI
    if _struct_iI is None:
        _struct_iI = struct.Struct("<iI")
    return _struct_iI
