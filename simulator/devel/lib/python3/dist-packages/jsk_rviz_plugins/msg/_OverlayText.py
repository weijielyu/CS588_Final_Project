# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jsk_rviz_plugins/OverlayText.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class OverlayText(genpy.Message):
  _md5sum = "7efc1ed34881f913afcee6ba02aa1242"
  _type = "jsk_rviz_plugins/OverlayText"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 ADD = 0
uint8 DELETE = 1

uint8 action

int32 width
int32 height
int32 left
int32 top
std_msgs/ColorRGBA bg_color

int32 line_width
float32 text_size
string font
std_msgs/ColorRGBA fg_color

string text

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  # Pseudo-constants
  ADD = 0
  DELETE = 1

  __slots__ = ['action','width','height','left','top','bg_color','line_width','text_size','font','fg_color','text']
  _slot_types = ['uint8','int32','int32','int32','int32','std_msgs/ColorRGBA','int32','float32','string','std_msgs/ColorRGBA','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action,width,height,left,top,bg_color,line_width,text_size,font,fg_color,text

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OverlayText, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action is None:
        self.action = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.left is None:
        self.left = 0
      if self.top is None:
        self.top = 0
      if self.bg_color is None:
        self.bg_color = std_msgs.msg.ColorRGBA()
      if self.line_width is None:
        self.line_width = 0
      if self.text_size is None:
        self.text_size = 0.
      if self.font is None:
        self.font = ''
      if self.fg_color is None:
        self.fg_color = std_msgs.msg.ColorRGBA()
      if self.text is None:
        self.text = ''
    else:
      self.action = 0
      self.width = 0
      self.height = 0
      self.left = 0
      self.top = 0
      self.bg_color = std_msgs.msg.ColorRGBA()
      self.line_width = 0
      self.text_size = 0.
      self.font = ''
      self.fg_color = std_msgs.msg.ColorRGBA()
      self.text = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4i4fif().pack(_x.action, _x.width, _x.height, _x.left, _x.top, _x.bg_color.r, _x.bg_color.g, _x.bg_color.b, _x.bg_color.a, _x.line_width, _x.text_size))
      _x = self.font
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.fg_color.r, _x.fg_color.g, _x.fg_color.b, _x.fg_color.a))
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bg_color is None:
        self.bg_color = std_msgs.msg.ColorRGBA()
      if self.fg_color is None:
        self.fg_color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.action, _x.width, _x.height, _x.left, _x.top, _x.bg_color.r, _x.bg_color.g, _x.bg_color.b, _x.bg_color.a, _x.line_width, _x.text_size,) = _get_struct_B4i4fif().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.font = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.font = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.fg_color.r, _x.fg_color.g, _x.fg_color.b, _x.fg_color.a,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4i4fif().pack(_x.action, _x.width, _x.height, _x.left, _x.top, _x.bg_color.r, _x.bg_color.g, _x.bg_color.b, _x.bg_color.a, _x.line_width, _x.text_size))
      _x = self.font
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.fg_color.r, _x.fg_color.g, _x.fg_color.b, _x.fg_color.a))
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bg_color is None:
        self.bg_color = std_msgs.msg.ColorRGBA()
      if self.fg_color is None:
        self.fg_color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.action, _x.width, _x.height, _x.left, _x.top, _x.bg_color.r, _x.bg_color.g, _x.bg_color.b, _x.bg_color.a, _x.line_width, _x.text_size,) = _get_struct_B4i4fif().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.font = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.font = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.fg_color.r, _x.fg_color.g, _x.fg_color.b, _x.fg_color.a,) = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_B4i4fif = None
def _get_struct_B4i4fif():
    global _struct_B4i4fif
    if _struct_B4i4fif is None:
        _struct_B4i4fif = struct.Struct("<B4i4fif")
    return _struct_B4i4fif
