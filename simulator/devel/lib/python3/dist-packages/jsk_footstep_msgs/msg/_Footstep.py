# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jsk_footstep_msgs/Footstep.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg

class Footstep(genpy.Message):
  _md5sum = "d890b275b63a90fe5f22a21e9a879971"
  _type = "jsk_footstep_msgs/Footstep"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 RIGHT=2
uint8 LEFT=1

# Constants to visualize progress
uint8 REJECTED=3
uint8 APPROVED=4

## limb_indicator values
uint8 LLEG=1
uint8 RLEG=2
uint8 LARM=5
uint8 RARM=6

uint8 leg ## value should be one of limb_indicator values.
geometry_msgs/Pose pose ## 'pose' represents nominal pose. It may be an end-effector of limb.
duration duration
# optional parameters
uint32 footstep_group
geometry_msgs/Vector3 dimensions ## cube [length(x), width(y), height(z)]
geometry_msgs/Vector3 offset     ## offset from pose to center of cube
float32 swing_height
float32 cost

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  RIGHT = 2
  LEFT = 1
  REJECTED = 3
  APPROVED = 4
  LLEG = 1
  RLEG = 2
  LARM = 5
  RARM = 6

  __slots__ = ['leg','pose','duration','footstep_group','dimensions','offset','swing_height','cost']
  _slot_types = ['uint8','geometry_msgs/Pose','duration','uint32','geometry_msgs/Vector3','geometry_msgs/Vector3','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leg,pose,duration,footstep_group,dimensions,offset,swing_height,cost

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Footstep, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.leg is None:
        self.leg = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.duration is None:
        self.duration = genpy.Duration()
      if self.footstep_group is None:
        self.footstep_group = 0
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.offset is None:
        self.offset = geometry_msgs.msg.Vector3()
      if self.swing_height is None:
        self.swing_height = 0.
      if self.cost is None:
        self.cost = 0.
    else:
      self.leg = 0
      self.pose = geometry_msgs.msg.Pose()
      self.duration = genpy.Duration()
      self.footstep_group = 0
      self.dimensions = geometry_msgs.msg.Vector3()
      self.offset = geometry_msgs.msg.Vector3()
      self.swing_height = 0.
      self.cost = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B7d2iI6d2f().pack(_x.leg, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.duration.secs, _x.duration.nsecs, _x.footstep_group, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.offset.x, _x.offset.y, _x.offset.z, _x.swing_height, _x.cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.duration is None:
        self.duration = genpy.Duration()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.offset is None:
        self.offset = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 125
      (_x.leg, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.duration.secs, _x.duration.nsecs, _x.footstep_group, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.offset.x, _x.offset.y, _x.offset.z, _x.swing_height, _x.cost,) = _get_struct_B7d2iI6d2f().unpack(str[start:end])
      self.duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B7d2iI6d2f().pack(_x.leg, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.duration.secs, _x.duration.nsecs, _x.footstep_group, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.offset.x, _x.offset.y, _x.offset.z, _x.swing_height, _x.cost))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.duration is None:
        self.duration = genpy.Duration()
      if self.dimensions is None:
        self.dimensions = geometry_msgs.msg.Vector3()
      if self.offset is None:
        self.offset = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 125
      (_x.leg, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.duration.secs, _x.duration.nsecs, _x.footstep_group, _x.dimensions.x, _x.dimensions.y, _x.dimensions.z, _x.offset.x, _x.offset.y, _x.offset.z, _x.swing_height, _x.cost,) = _get_struct_B7d2iI6d2f().unpack(str[start:end])
      self.duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B7d2iI6d2f = None
def _get_struct_B7d2iI6d2f():
    global _struct_B7d2iI6d2f
    if _struct_B7d2iI6d2f is None:
        _struct_B7d2iI6d2f = struct.Struct("<B7d2iI6d2f")
    return _struct_B7d2iI6d2f
