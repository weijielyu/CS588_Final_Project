# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jsk_gui_msgs/Tablet.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import jsk_gui_msgs.msg
import std_msgs.msg

class Tablet(genpy.Message):
  _md5sum = "0bab196c7b214826d8c27d7bd5f924f6"
  _type = "jsk_gui_msgs/Tablet"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
# hardware_namel: iPad, Android, other mobile
string hardware_name
string hardware_id
Action action
DeviceSensor sensor
Touch[] touches
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: jsk_gui_msgs/Action
byte RARMID=0
byte LARMID=1

# task: push, pick, open, slide, MoveNeck, MoveBase
string task_name

# selection: button names
# string selection_name

# arm: :rarm, :lsrm
int64 arm_id

# state of touch: touch, pick, pinch, sweep
# for debugging
string state
# value of state
float64 state_value

# direction: up, down, left, right
string direction
# value of direction, degree
float64 direction_value

int64 touch_x
int64 touch_y

# Example
#  push: touches[0].x, touches[0].y, task_name, arm_id
#  open: touches[0 1 2].x, touches[0 1 2].y, task_name, arm_id
#  slide: touches[0 1 2].x, touches[0 1 2].y, task_name, arm_id
#  move_neck: task_name, direction, direction_value
#  move_base: task_name, direction, direction_value
================================================================================
MSG: jsk_gui_msgs/DeviceSensor
float64 temperature
float64 relative_humidity
float64 light
float64 pressure
float64 proximity




================================================================================
MSG: jsk_gui_msgs/Touch
# finger_id
int64 finger_id
# touch point(screen point)
float64 x
float64 y
# based image size (usually not needed)
int64 image_width
int64 image_height"""
  __slots__ = ['header','hardware_name','hardware_id','action','sensor','touches']
  _slot_types = ['std_msgs/Header','string','string','jsk_gui_msgs/Action','jsk_gui_msgs/DeviceSensor','jsk_gui_msgs/Touch[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,hardware_name,hardware_id,action,sensor,touches

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Tablet, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.hardware_name is None:
        self.hardware_name = ''
      if self.hardware_id is None:
        self.hardware_id = ''
      if self.action is None:
        self.action = jsk_gui_msgs.msg.Action()
      if self.sensor is None:
        self.sensor = jsk_gui_msgs.msg.DeviceSensor()
      if self.touches is None:
        self.touches = []
    else:
      self.header = std_msgs.msg.Header()
      self.hardware_name = ''
      self.hardware_id = ''
      self.action = jsk_gui_msgs.msg.Action()
      self.sensor = jsk_gui_msgs.msg.DeviceSensor()
      self.touches = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hardware_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action.task_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action.arm_id
      buff.write(_get_struct_q().pack(_x))
      _x = self.action.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action.state_value
      buff.write(_get_struct_d().pack(_x))
      _x = self.action.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2q5d().pack(_x.action.direction_value, _x.action.touch_x, _x.action.touch_y, _x.sensor.temperature, _x.sensor.relative_humidity, _x.sensor.light, _x.sensor.pressure, _x.sensor.proximity))
      length = len(self.touches)
      buff.write(_struct_I.pack(length))
      for val1 in self.touches:
        _x = val1
        buff.write(_get_struct_q2d2q().pack(_x.finger_id, _x.x, _x.y, _x.image_width, _x.image_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.action is None:
        self.action = jsk_gui_msgs.msg.Action()
      if self.sensor is None:
        self.sensor = jsk_gui_msgs.msg.DeviceSensor()
      if self.touches is None:
        self.touches = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hardware_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hardware_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action.task_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action.task_name = str[start:end]
      start = end
      end += 8
      (self.action.arm_id,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action.state = str[start:end]
      start = end
      end += 8
      (self.action.state_value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action.direction = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.action.direction_value, _x.action.touch_x, _x.action.touch_y, _x.sensor.temperature, _x.sensor.relative_humidity, _x.sensor.light, _x.sensor.pressure, _x.sensor.proximity,) = _get_struct_d2q5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.touches = []
      for i in range(0, length):
        val1 = jsk_gui_msgs.msg.Touch()
        _x = val1
        start = end
        end += 40
        (_x.finger_id, _x.x, _x.y, _x.image_width, _x.image_height,) = _get_struct_q2d2q().unpack(str[start:end])
        self.touches.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hardware_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.hardware_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action.task_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action.arm_id
      buff.write(_get_struct_q().pack(_x))
      _x = self.action.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action.state_value
      buff.write(_get_struct_d().pack(_x))
      _x = self.action.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2q5d().pack(_x.action.direction_value, _x.action.touch_x, _x.action.touch_y, _x.sensor.temperature, _x.sensor.relative_humidity, _x.sensor.light, _x.sensor.pressure, _x.sensor.proximity))
      length = len(self.touches)
      buff.write(_struct_I.pack(length))
      for val1 in self.touches:
        _x = val1
        buff.write(_get_struct_q2d2q().pack(_x.finger_id, _x.x, _x.y, _x.image_width, _x.image_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.action is None:
        self.action = jsk_gui_msgs.msg.Action()
      if self.sensor is None:
        self.sensor = jsk_gui_msgs.msg.DeviceSensor()
      if self.touches is None:
        self.touches = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hardware_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hardware_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.hardware_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.hardware_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action.task_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action.task_name = str[start:end]
      start = end
      end += 8
      (self.action.arm_id,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action.state = str[start:end]
      start = end
      end += 8
      (self.action.state_value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action.direction = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.action.direction_value, _x.action.touch_x, _x.action.touch_y, _x.sensor.temperature, _x.sensor.relative_humidity, _x.sensor.light, _x.sensor.pressure, _x.sensor.proximity,) = _get_struct_d2q5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.touches = []
      for i in range(0, length):
        val1 = jsk_gui_msgs.msg.Touch()
        _x = val1
        start = end
        end += 40
        (_x.finger_id, _x.x, _x.y, _x.image_width, _x.image_height,) = _get_struct_q2d2q().unpack(str[start:end])
        self.touches.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d2q5d = None
def _get_struct_d2q5d():
    global _struct_d2q5d
    if _struct_d2q5d is None:
        _struct_d2q5d = struct.Struct("<d2q5d")
    return _struct_d2q5d
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_q2d2q = None
def _get_struct_q2d2q():
    global _struct_q2d2q
    if _struct_q2d2q is None:
        _struct_q2d2q = struct.Struct("<q2d2q")
    return _struct_q2d2q
