# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jsk_gui_msgs/Action.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Action(genpy.Message):
  _md5sum = "d81dc8475ff89ce7097d2e73ebfc2591"
  _type = "jsk_gui_msgs/Action"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """byte RARMID=0
byte LARMID=1

# task: push, pick, open, slide, MoveNeck, MoveBase
string task_name

# selection: button names
# string selection_name

# arm: :rarm, :lsrm
int64 arm_id

# state of touch: touch, pick, pinch, sweep
# for debugging
string state
# value of state
float64 state_value

# direction: up, down, left, right
string direction
# value of direction, degree
float64 direction_value

int64 touch_x
int64 touch_y

# Example
#  push: touches[0].x, touches[0].y, task_name, arm_id
#  open: touches[0 1 2].x, touches[0 1 2].y, task_name, arm_id
#  slide: touches[0 1 2].x, touches[0 1 2].y, task_name, arm_id
#  move_neck: task_name, direction, direction_value
#  move_base: task_name, direction, direction_value"""
  # Pseudo-constants
  RARMID = 0
  LARMID = 1

  __slots__ = ['task_name','arm_id','state','state_value','direction','direction_value','touch_x','touch_y']
  _slot_types = ['string','int64','string','float64','string','float64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_name,arm_id,state,state_value,direction,direction_value,touch_x,touch_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Action, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.task_name is None:
        self.task_name = ''
      if self.arm_id is None:
        self.arm_id = 0
      if self.state is None:
        self.state = ''
      if self.state_value is None:
        self.state_value = 0.
      if self.direction is None:
        self.direction = ''
      if self.direction_value is None:
        self.direction_value = 0.
      if self.touch_x is None:
        self.touch_x = 0
      if self.touch_y is None:
        self.touch_y = 0
    else:
      self.task_name = ''
      self.arm_id = 0
      self.state = ''
      self.state_value = 0.
      self.direction = ''
      self.direction_value = 0.
      self.touch_x = 0
      self.touch_y = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.task_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.arm_id
      buff.write(_get_struct_q().pack(_x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state_value
      buff.write(_get_struct_d().pack(_x))
      _x = self.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2q().pack(_x.direction_value, _x.touch_x, _x.touch_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_name = str[start:end]
      start = end
      end += 8
      (self.arm_id,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state = str[start:end]
      start = end
      end += 8
      (self.state_value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.direction = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.direction_value, _x.touch_x, _x.touch_y,) = _get_struct_d2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.task_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.arm_id
      buff.write(_get_struct_q().pack(_x))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state_value
      buff.write(_get_struct_d().pack(_x))
      _x = self.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2q().pack(_x.direction_value, _x.touch_x, _x.touch_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_name = str[start:end]
      start = end
      end += 8
      (self.arm_id,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.state = str[start:end]
      start = end
      end += 8
      (self.state_value,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.direction = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.direction_value, _x.touch_x, _x.touch_y,) = _get_struct_d2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d2q = None
def _get_struct_d2q():
    global _struct_d2q
    if _struct_d2q is None:
        _struct_d2q = struct.Struct("<d2q")
    return _struct_d2q
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
